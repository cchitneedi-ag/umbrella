# Generated by Django 3.1.6 on 2021-03-31 17:17

import core.encoders
import core.models
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.citext
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Commit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('commitid', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('updatestamp', models.DateTimeField(auto_now=True)),
                ('ci_passed', models.BooleanField(null=True)),
                ('totals', models.JSONField(null=True)),
                ('report', models.JSONField(encoder=core.encoders.ReportJSONEncoder, null=True)),
                ('merged', models.BooleanField(null=True)),
                ('deleted', models.BooleanField(null=True)),
                ('notified', models.BooleanField(null=True)),
                ('branch', models.TextField(null=True)),
                ('pullid', models.IntegerField(null=True)),
                ('message', models.TextField(null=True)),
                ('parent_commit_id', models.TextField(db_column='parent', null=True)),
                ('state', models.CharField(max_length=256)),
                ('author', models.ForeignKey(db_column='author', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'commits',
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('version', models.TextField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'version',
            },
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('repoid', models.AutoField(primary_key=True, serialize=False)),
                ('name', django.contrib.postgres.fields.citext.CITextField()),
                ('service_id', models.TextField()),
                ('private', models.BooleanField()),
                ('updatestamp', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(null=True)),
                ('language', models.TextField(blank=True, null=True)),
                ('branch', models.TextField(default='master', null=True)),
                ('upload_token', models.UUIDField(default=uuid.uuid4)),
                ('yaml', models.JSONField(null=True)),
                ('cache', models.JSONField(null=True)),
                ('image_token', models.CharField(default=core.models._gen_image_token, max_length=10)),
                ('using_integration', models.BooleanField(null=True)),
                ('hookid', models.TextField(null=True)),
                ('activated', models.BooleanField(default=False, null=True)),
                ('deleted', models.BooleanField(default=False)),
                ('author', models.ForeignKey(db_column='ownerid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('bot', models.ForeignKey(db_column='bot', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bot_repos', to=settings.AUTH_USER_MODEL)),
                ('fork', models.ForeignKey(blank=True, db_column='forkid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.repository')),
            ],
            options={
                'db_table': 'repos',
                'ordering': ['-repoid'],
            },
        ),
        migrations.CreateModel(
            name='Pull',
            fields=[
                ('pullid', models.IntegerField(primary_key=True, serialize=False)),
                ('issueid', models.IntegerField(null=True)),
                ('state', models.CharField(default='open', max_length=100)),
                ('title', models.CharField(max_length=100, null=True)),
                ('base', models.TextField(null=True)),
                ('head', models.TextField(null=True)),
                ('compared_to', models.TextField(null=True)),
                ('commentid', models.CharField(max_length=100, null=True)),
                ('updatestamp', models.DateTimeField(auto_now_add=True)),
                ('diff', models.JSONField(null=True)),
                ('flare', models.JSONField(null=True)),
                ('author', models.ForeignKey(db_column='author', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('repository', models.ForeignKey(db_column='repoid', on_delete=django.db.models.deletion.CASCADE, related_name='pull_requests', to='core.repository')),
            ],
            options={
                'db_table': 'pulls',
                'ordering': ['-pullid'],
            },
        ),
        migrations.CreateModel(
            name='CommitNotification',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('comment', 'Comment'), ('gitter', 'Gitter'), ('hipchat', 'Hipchat'), ('irc', 'Irc'), ('slack', 'Slack'), ('status_changes', 'Status Changes'), ('status_patch', 'Status Patch'), ('status_project', 'Status Project'), ('webhook', 'Webhook')], max_length=32)),
                ('decoration_type', models.CharField(choices=[('standard', 'Standard'), ('upgrade', 'Upgrade')], max_length=32, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('state', models.CharField(max_length=32, null=True)),
                ('commit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.commit')),
            ],
            options={
                'db_table': 'commit_notifications',
            },
        ),
        migrations.AddField(
            model_name='commit',
            name='repository',
            field=models.ForeignKey(db_column='repoid', on_delete=django.db.models.deletion.CASCADE, related_name='commits', to='core.repository'),
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('name', models.TextField(db_column='branch', primary_key=True, serialize=False)),
                ('authors', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, db_column='authors', null=True, size=None)),
                ('head', models.TextField()),
                ('base', models.TextField(null=True)),
                ('updatestamp', models.DateTimeField(auto_now=True)),
                ('repository', models.ForeignKey(db_column='repoid', on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='core.repository')),
            ],
            options={
                'db_table': 'branches',
            },
        ),
    ]
