version: 2.1
executors:
  codecov-deploy:
    docker:
    - image: us-docker.pkg.dev/genuine-polymer-165712/codecov-devops/codecov-deploy:latest
      user: root
      auth:
        username: _json_key
        password: $GCLOUD_SERVICE_KEY
    working_directory: /work
  codecov-api:
    docker:
    - image: gcr.io/genuine-polymer-165712/codecov-api:latest
      user: root
      auth:
        username: _json_key
        password: $GCLOUD_SERVICE_KEY
    - image: cimg/postgres:14.6
      name: postgres
    - image: timescale/timescaledb-ha:pg14-latest
      name: timescale
      environment:
        POSTGRES_HOST_AUTH_METHOD: trust
        POSTGRES_PASSWORD: password
    working_directory: /api


gcloud_auth: &gcloud_auth
  name: Copy gcloud auth for docker push
  command: |-
    echo "$GCLOUD_SERVICE_KEY" > service.json
    gcloud auth activate-service-account --key-file=service.json
    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
    gcloud auth configure-docker

gcloud_auth_enterprise: &gcloud_auth_enterprise
  name: Copy gcloud auth for docker push
  command: |-
    echo "$GCLOUD_SERVICE_KEY" > service.json
    gcloud auth activate-service-account --key-file=service.json
    gcloud --quiet config set project ${GOOGLE_ENTERPRISE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
    gcloud auth configure-docker

jobs:
  lint-isort:
    docker:
      - image: circleci/python:3.7.6
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Running black and isort
          command: |
            echo "Installing..."
            pip3 install -Iv black==22.3.0 isort
            echo "Linting..."
            black --check .
            echo "Sorting..."
            isort --profile black --check .
  build:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker:
        version: 20.10.7
    - run:
        <<: *gcloud_auth
    - run:
        name: build container
        command: |-
          make -f Makefile.circle build-requirements
          make -f Makefile.circle build VERSION=$CIRCLE_TAG
          make -f Makefile.circle push
          make -f Makefile.circle tag
          make -f Makefile.circle save
    - persist_to_workspace:
        root: .
        paths:
          - .
  build-enterprise:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker:
        version: 20.10.7
    - run: |
        ssh remote-docker \<<EOF
          sudo bash -c 'echo "{\"experimental\": true}" > /etc/docker/daemon.json'
          sudo systemctl restart docker
        EOF
    - run:
        <<: *gcloud_auth_enterprise
    - run:
        name: build container
        command: |-
          make -f Makefile.circle build-requirements
          make -f Makefile.circle build-enterprise VERSION=$CIRCLE_TAG
          make -f Makefile.circle build-enterprise-runtime VERSION=$CIRCLE_TAG
          make -f Makefile.circle push-enterprise
          make -f Makefile.circle tag-enterprise
  codecovstartup:
    executor: codecov-api
    working_directory: ~/repo
    steps:
    - checkout
    - run:
        name: Install CLI
        command: |
          apk add git openssh musl-dev gcc build-base python3-dev libffi-dev
          pip install git+ssh://git@github.com/codecov/codecov-cli.git@16282e83ac4c7658b1c3cee28dea0ee49b258f48#egg=codecov-cli
    - run:
        name: Save commit info 
        command: |
          codecovcli --auto-load-params-from circleci create-commit --service=github
    - run: 
        name: Create report
        command: |
          codecovcli --auto-load-params-from circleci create-report --service=github
  test:
    executor: codecov-api
    working_directory: ~/repo
    environment:
      SETUP__TIMESERIES__ENABLED: true
    steps:
    - checkout
    - run:
        name: upgrade curl
        command: |
          apk update
          apk add curl
          apk add git
          apk upgrade
    - run:
        name: verify postgres is up
        command: |
          while ! nc -vz postgres 5432; do sleep 1; echo "waiting for postgres"; done
    - run:
        name: verify timescale is up
        command: |
          while ! nc -vz timescale 5432; do sleep 1; echo "waiting for timescale"; done
    - run:
        name: run tests
        command: |
          make test.unit
          # make test.integration
    - run:
        name: check for migration conflicts
        command: |
          make check-for-migration-conflicts
    - run:
        name: upload using codecovcli 
        command: |
          apk add git openssh musl-dev gcc build-base python3-dev libffi-dev
          pip install git+ssh://git@github.com/codecov/codecov-cli.git@16282e83ac4c7658b1c3cee28dea0ee49b258f48#egg=codecov-cli
          codecovcli --auto-load-params-from circleci do-upload --flag unit-latest-uploader --flag unit --use-new-uploader True -t ${CODECOV_ORG_TOKEN}
    - run:
        name: codecov-staging
        command: |
          chmod +x codecov-alpine
          ./codecov-alpine -R . --url https://stage-web.codecov.dev -t $CODECOV_STAGING_TOKEN -F unit
    - run:
        name: codecov-v5
        command: |
          chmod +x codecov-alpine
          ./codecov-alpine -R . --url https://v5-qa.codecov.dev -t $CODECOV_V5_TOKEN -F unit
  portable:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth
      - run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run: make -f Makefile.circle docker-deploy
  dive:
      executor: codecov-deploy
      steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth
      - run:
          name: Dive image
          command: |
            make -f Makefile.circle dive
  dive-enterprise:
      executor: codecov-deploy
      steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth_enterprise
      - run:
          name: Dive enterprise image
          command: |
            make -f Makefile.circle dive-enterprise
            make -f Makefile.circle deep-dive
  staging:
    executor: codecov-deploy
    environment:
      SENTRY_ORG: codecov
      SENTRY_PROJECT: api
      SENTRY_ENVIRONMENT: staging
    steps:
    - attach_workspace:
        at: .
    - setup_remote_docker:
        version: 20.10.7
    - run:
        <<: *gcloud_auth
    - run:
        name: docker build, tag, and upload to staging
        command: |
          make -f Makefile.circle staging
    - run:
        name: Create release and notify Sentry of deploy
        command: |
          curl -sL https://sentry.io/get-cli/ | bash
          export SENTRY_RELEASE=$SENTRY_ENVIRONMENT-release-$(git rev-parse --short=7 HEAD)
          sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
          sentry-cli releases set-commits $SENTRY_RELEASE --auto
          sentry-cli releases finalize $SENTRY_RELEASE
          sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT  
  production:
    executor: codecov-deploy
    environment:
      SENTRY_ORG: codecov
      SENTRY_PROJECT: api
      SENTRY_ENVIRONMENT: production
    steps:
    - attach_workspace:
        at: .
    - setup_remote_docker:
        version: 20.10.7
    - run:
        <<: *gcloud_auth
    - run:
        name: docker build, tag, and upload to production
        command: |
          make -f Makefile.circle production
    - run:
        name: Create release and notify Sentry of deploy
        command: |
          curl -sL https://sentry.io/get-cli/ | bash
          export SENTRY_RELEASE=$SENTRY_ENVIRONMENT-release-$(git rev-parse --short=7 HEAD)
          sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
          sentry-cli releases set-commits $SENTRY_RELEASE --auto
          sentry-cli releases finalize $SENTRY_RELEASE
          sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT  
  enterprise:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth_enterprise
      - run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: docker build, tag, and upload to enterprise qa
          command: |
            make -B -f Makefile.circle enterprise
  enterprise-release:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth_enterprise
      - run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: Release Enterprise to Dockerhub
          command: |
            make -B -f Makefile.circle release-enterprise

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - lint-isort
      - build:
          context: "circleci google deploy context"
          filters:
            tags:
              only: /.*/
      - build-enterprise:
          context: "circleci google deploy context"
          requires:
            - build
          filters:
            branches:
              only: master
            tags:
              only:
                - /enterprise-.*/
                - /qa-.*/
      - codecovstartup:
          context: "circleci google deploy context"
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test:
          context: "circleci google deploy context"
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - dive:
          context: "circleci google deploy context"
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - portable:
          context:
            - "DockerHub Push Context"
            - "circleci google deploy context"
          requires:
            - build
            - test
            - lint-isort
          filters:
            branches:
              only:
                - master
                - /portable-.*/
      - staging:
          context: "circleci google deploy context"
          requires:
            - build
            - test
            - lint-isort
          filters:
            branches:
              only: staging
      - production:
          context: "circleci google deploy context"
          requires:
            - build
            - test
            - lint-isort
            - dive
          filters:
            branches:
              only: master
      - dive-enterprise:
          context:
            - "circleci google deploy context"
          requires:
            - build-enterprise
          filters:
            tags:
              only:
                - /^qa-.*/
                - /^enterprise-.*/
            branches:
              only: master
      - enterprise:
          context:
            - "DockerHub Push Context"
            - "circleci google deploy context"
          requires:
            - build-enterprise
            - test
            - lint-isort
            - dive-enterprise
          filters:
            tags:
              only:
                - /^qa-.*/
                - /^enterprise-.*/
            branches:
              only: master
      - hold:
          type: approval
          requires:
            - enterprise
          filters:
            tags:
              only:
                - /^enterprise-.*/
            branches:
              ignore: /.*/
      - enterprise-release:
          context:
            - "DockerHub Push Context"
            - "circleci google deploy context"
          requires:
            - enterprise
            - hold
          filters:
            tags:
              only: /^enterprise-.*/
            branches:
              ignore: /.*/
