version: 2.1
executors:
  codecov-deploy:
    docker:
    - image: gcr.io/genuine-polymer-165712/codecov-deploy:latest
      user: root
      auth:
        username: _json_key
        password: $GCLOUD_SERVICE_KEY
    working_directory: /work
  codecov-api:
    docker:
    - image: gcr.io/genuine-polymer-165712/codecov-api:latest
      user: root
      auth:
        username: _json_key
        password: $GCLOUD_SERVICE_KEY
    - image: circleci/postgres:9.6.2
      name: postgres
    working_directory: /api

gcloud_auth: &gcloud_auth
  name: Copy gcloud auth for docker push
  command: |-
    echo "$GCLOUD_SERVICE_KEY" > service.json
    gcloud auth activate-service-account --key-file=service.json
    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
    gcloud auth configure-docker

k8s_auth: &k8s_auth
  name: Copy k8s auth for kubectl
  command: |-
    gcloud container clusters get-credentials --zone ${GOOGLE_COMPUTE_ZONE} ${GOOGLE_CLUSTER_NAME}

jobs:
  build:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        name: build container
        command: |-
          make -f Makefile.circle build-requirements GH_ACCESS_TOKEN=$GH_ACCESS_TOKEN
          make -f Makefile.circle build VERSION=$CIRCLE_TAG
          make -f Makefile.circle push
  test:
    executor: codecov-api
    steps:
    - run:
        name: verify postgres is up
        command: |
          while ! nc -vz postgres 5432; do sleep 1; echo "waiting for postgres"; done
    - run:
        name: run tests
        command: |
          make test.unit
          # make test.integration

    - run:
        name: codecov
        command: |
          chmod +x codecov-alpine 
          ./codecov-alpine -t fcd1b412-6063-486f-bdb3-5f73f77fa1d6 -F unit
    - run:
        name: codecov-staging
        command: |
          apk add bash curl
          bash -c "bash <(curl -s https://stage-web.codecov.dev/bash) -t dfdd2ba4-4dbc-40a6-8a96-534c0a39c3a5 -F unit"


  portable:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker
      - run:
          <<: *gcloud_auth
      - run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run: make -f Makefile.circle docker-deploy

  staging:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        name: docker build, tag, and upload to staging
        command: |
          make -f Makefile.circle staging

  production:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        name: docker build, tag, and upload to production
        command: |
          make -f Makefile.circle production

  deploy:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        <<: *k8s_auth
    - run:
        name: deploy to k8s
        command: |-
          make -f Makefile.circle tag
          make -f Makefile.circle deploy

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - portable:
          context: "DockerHub Push Context"
          requires:
            - build
            - test
          filters:
            branches:
              only:
                - master
                - /portable-.*/
      - staging:
          requires:
            - build
            - test
          filters:
            branches:
              only: staging
      - production:
          requires:
            - build
            - test
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build
            - test
          filters:
            branches:
              only: master
