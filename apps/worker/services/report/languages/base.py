from typing import Callable, Mapping

from covreports.resources import Report


class BaseLanguageProcessor(object):

    @property
    def name(self):
        return self.get_processor_name()

    def __init__(self, *args, **kwargs):
        pass

    def matches_content(self, content, first_line: str, name: str) -> bool:
        pass

    def process(self, content: str, path_fixer: Callable, ignored_lines: Mapping[str, dict], sessionid: str) -> Report:
        """Processes a report uploaded by the user, returning a `Report`

        This is the base function which we need to implement

        Args:
            content (str): The user uploaded report, as generated by the bash-uploader
            path_fixer (Callable): A callable that receives a function that fixes a path
            ignored_lines (Mapping[str, dict]): A dict indicating which lines on which files
                are to be ignored, in the format:
                {
                    'filename': {
                        'eof': 40, 'lines': {40, 33, 37, 38}
                    },
                }
            sessionid (str): An identifier for the current sessionid
        Returns:
            Report: A report with the processed data from the report
        Raises:
            ReportExpiredException: If the report is considered expired
        """
        pass

    @classmethod
    def get_processor_name(cls):
        return cls.__name__
