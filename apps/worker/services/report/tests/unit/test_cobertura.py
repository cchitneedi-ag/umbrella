from time import time
from json import dumps
from ddt import data, ddt
import xml.etree.cElementTree as etree

from tests.base import TestCase
from app.tasks.reports.languages import cobertura


xml = '''<?xml version="1.0" ?>
<!DOCTYPE coverage
  SYSTEM 'http://cobertura.sourceforge.net/xml/coverage-03.dtd'>
<%scoverage branch-rate="0.07143" line-rate="0.5506" timestamp="%s" version="3.7.1">
    <!-- Generated by coverage.py: http://nedbatchelder.com/code/coverage -->
    <packages>
        <package branch-rate="0.07143" complexity="0" line-rate="0.5506" name="">
            <classes>
                <class branch-rate="0.07143" complexity="0" filename="empty" line-rate="0.5506" name="empty/src"></class>
                <class branch-rate="0.07143" complexity="0" filename="source" line-rate="0.5506" name="folder/file">
                    <methods>
                        <method name="(anonymous_1)"  hits="1"  signature="()V" >
                            <lines><line number="undefined"  hits="1" /></lines>
                        </method>
                    </methods>
                    <lines>
                        <line hits="8" number="0"/>
                        <line hits="1.0" number="1"/>
                        <line branch="true" condition-coverage="0%% (0/2)" hits="1" missing-branches="exit" number="2"/>
                        <line branch="true" condition-coverage="50%% (1/2)" hits="1" missing-branches="30" number="3"/>
                        <line branch="true" condition-coverage="100%% (2/2)" hits="1" number="4"/>
                        <line number="5" hits="0" branch="true" condition-coverage="50%% (2/4)">
                          <conditions>
                            <condition number="0" type="jump" coverage="0%%"/>
                            <condition number="1" type="jump" coverage="0%%"/>
                            <condition number="2" type="jump" coverage="100%%"/>
                            <condition number="3" type="jump" coverage="100%%"/>
                          </conditions>
                        </line>
                        <line number="6" hits="0" branch="true" condition-coverage="50%% (2/4)">
                          <conditions>
                            <condition number="0" type="jump" coverage="0%%"/>
                            <condition number="1" type="jump" coverage="0%%"/>
                          </conditions>
                        </line>
                        <line branch="true" condition-coverage="0%% (0/2)" hits="1" missing-branches="exit,exit,exit" number="7"/>
                    </lines>
                </class>
                <!-- Scala coverage -->
                <class branch-rate="0.07143" complexity="0" filename="file" line-rate="0.5506" name="">
                    <methods>
                        <statements>
                            <statement source="file" method="beforeInteropCommit" line="1" branch="false" invocation-count="0"></statement>
                            <statement source="file" method="" line="2" branch="true" invocation-count="1"></statement>
                            <statement source="file" method="" line="3" branch="false" invocation-count="1"></statement>
                        </statements>
                    </methods>
                </class>
                <class branch-rate="0.07143" complexity="0" filename="ignore" line-rate="0.5506" name="codecov/__init__"></class>
            </classes>
        </package>
    </packages>
</%scoverage>
'''

result = {
    "files": {
        "source": {
            "l": {
                "1": {
                    "c": 1,
                    "s": [[0, 1, None, None, None]]
                },
                "2": {
                    "c": "0/2",
                    "t": "b",
                    "s": [[0, "0/2", ["exit"], None, None]]
                },
                "3": {
                    "c": "1/2",
                    "t": "b",
                    "s": [[0, "1/2", ["30"], None, None]]
                },
                "4": {
                    "c": "2/2",
                    "t": "b",
                    "s": [[0, "2/2", None, None, None]]
                },
                "5": {
                    "c": "2/4",
                    "t": "b",
                    "s": [[0, "2/4", ["0:jump", "1:jump"], None, None]]
                },
                "6": {
                    "c": "2/4",
                    "t": "b",
                    "s": [[0, "2/4", ["0:jump", "1:jump"], None, None]]
                },
                "7": {
                    "c": "0/2",
                    "t": "b",
                    "s": [[0, "0/2", ["loop", "exit"], None, None]]
                }
            }
        },
        "file": {
            "l": {
                "1": {
                    "c": 0,
                    "t": "m",
                    "s": [[0, 0, None, None, None]]
                },
                "2": {
                    "c": 1,
                    "t": "b",
                    "s": [[0, 1, None, None, None]]
                },
                "3": {
                    "c": 1,
                    "s": [[0, 1, None, None, None]]
                }
            }
        }
    }
}


@ddt
class Test(TestCase):
    def test_report(self):
        def fixes(path):
            if path == 'ignore':
                return None
            assert path in ('source', 'empty', 'file', 'nolines')
            return path

        report = cobertura.from_xml(etree.fromstring(xml % ('', int(time()), '')), fixes, {}, 0, {'codecov': {'max_report_age': None}})
        print report.to_database()
        report = self.v3_to_v2(report)
        print dumps(report, indent=4)
        self.validate.report(report)
        assert result == report

    @data((int(time()) - 172800), '01-01-2014')
    def test_expired(self, date):
        with self.assertRaisesRegexp(AssertionError, 'Cobertura report expired'):
            cobertura.from_xml(etree.fromstring(xml % ('', date, '')), None, {}, None, None)

        with self.assertRaisesRegexp(AssertionError, 'Cobertura report expired'):
            cobertura.from_xml(etree.fromstring(xml % ('s', date, 's')), None, {}, None, None)
