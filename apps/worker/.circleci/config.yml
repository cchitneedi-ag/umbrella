version: 2.1
executors:
  codecov-deploy:
    docker:
      - image: $CODECOV_DEPLOY_IMAGE_LATEST
        user: root
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    working_directory: /work
  codecov-worker:
    docker:
      - image: $CODECOV_WORKER_IMAGE_LATEST
        user: root
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
      - image: circleci/postgres:9.6.2
        name: postgres
    working_directory: /worker

gcloud_auth: &gcloud_auth
  name: Copy gcloud auth for docker push
  command: |-
    echo "$GCLOUD_SERVICE_KEY" > service.json
    gcloud auth activate-service-account --key-file=service.json
    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
    gcloud auth configure-docker

gcloud_auth_enterprise: &gcloud_auth_enterprise
  name: Copy gcloud auth for docker push
  command: |-
    echo "$GCLOUD_SERVICE_KEY" > service.json
    gcloud auth activate-service-account --key-file=service.json
    gcloud --quiet config set project ${GOOGLE_ENTERPRISE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
    gcloud auth configure-docker

jobs:


  ATS:
    executor: codecov-worker
    steps:
      - checkout
      - run:
          name: Install CLI
          command: |
            apk add git build-base
            pip install codecov-cli
      - run:
          name: Run Static Analysis
          command: |
            codecovcli static-analysis --token=$STATIC_TOKEN
      - run:
          name: Run Predictor Analysis
          command: |
            echo $(git merge-base HEAD^ main)
            codecovcli label-analysis --token=$STATIC_TOKEN --base-sha=$(git merge-base HEAD^ main)
      - run:
          name: Upload onlysomelabels
          command: |
            codecovcli --codecov-yml-path=codecov_cli.yml do-upload --plugin pycoverage --plugin compress-pycoverage --flag onlysomelabels --fail-on-error
  mutations:
    executor: codecov-worker
    steps:
      - checkout
      - run:
          name: Run Mutations
          command: |
            apk add git
            git diff main $CIRCLE_SHA1 > data.patch
            pip install mutmut[patch]
            mutmut run --use-patch-file data.patch || true
            mkdir /tmp/artifacts;
            mutmut junitxml > /tmp/artifacts/mut.xml
      - store_test_results:
          path: /tmp/artifacts/mut.xml




  enterprise-release:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth_enterprise
      - run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: Release Enterprise to Dockerhub
          command: |
            make -B -f Makefile.circle release-enterprise
  deploy:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          <<: *gcloud_auth
      - run:
          name: tag for k8s
          command: |-
            make -f Makefile.circle tag
  dockerhub:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Pull Latest Worker Image and Deploy to DockerHub
          command: |
            docker login -u _json_key -p "$GCLOUD_SERVICE_KEY" "$CODECOV_DEPLOY_IMAGE_LATEST"
            make -f Makefile.circle pull-latest
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
            make -f Makefile.circle dockerhub-deploy-main

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - linter
      - build:
          context: "circleci google deploy context"
          filters:
            tags:
              only: /.*/
      - build-enterprise:
          context: "circleci google deploy context"
          requires:
            - build
          filters:
            branches:
              only:
                - main
            tags:
              only:
                - /enterprise-.*/
                - /qa-.*/
      - mutations:
          context: "circleci google deploy context"
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test:
          context: "circleci google deploy context"
          requires:
            - build
            - codecovstartup
          filters:
            tags:
              only: /.*/
      - ATS:
          context: "circleci google deploy context"
          requires:
            - codecovstartup
          filters:
            tags:
              only: /.*/
      - codecovstartup:
          context: "circleci google deploy context"
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - staging:
          context: "circleci google deploy context"
          requires:
            - build
            - test
          filters:
            branches:
              only:
                - main
                - staging
      - production:
          context: "circleci google deploy context"
          requires:
            - build
            - test
          filters:
            tags:
              only: "/^prod(uction)?-[0-9]{4}-[0-9]{2}-[0-9]{3,4}/"
            branches:
              only: production
      - enterprise:
          context:
            - "DockerHub Push Context"
            - "circleci google deploy context"
          requires:
            - build-enterprise
            - test
          filters:
            tags:
              only:
                - /^qa-.*/
                - /^enterprise-.*/
            branches:
              only: main
      - hold:
          type: approval
          requires:
            - enterprise
          filters:
            tags:
              only:
                - /^enterprise-.*/
            branches:
              ignore: /.*/
      - enterprise-release:
          context:
            - "DockerHub Push Context"
            - "circleci google deploy context"
          requires:
            - enterprise
            - hold
          filters:
            tags:
              only: /^enterprise-.*/
            branches:
              ignore: /.*/
      - deploy:
          context: "circleci google deploy context"
          requires:
            - build
            - test
          filters:
            branches:
              only: production
      - dockerhub:
          context:
            - "DockerHub Push Context"
            - "circleci google deploy context"
          requires:
            - build
            - test
            # - standards-coverage-comparison
          filters:
            branches:
              only: main
