version: 2.1
executors:
  codecov-deploy:
    docker:
    - image: gcr.io/test6u3411ty6xqh462sri/codecov-deploy:latest
      user: root
      auth:
        username: _json_key
        password: $GCLOUD_SERVICE_KEY
    working_directory: /work
  codecov-worker:
    docker:
    - image: gcr.io/test6u3411ty6xqh462sri/codecov-worker:latest
      user: root
      auth:
        username: _json_key
        password: $GCLOUD_SERVICE_KEY
    - image: circleci/postgres:9.6.2
      name: postgres
    working_directory: /worker

gcloud_auth: &gcloud_auth
  name: Copy gcloud auth for docker push
  command: |-
    echo "$GCLOUD_SERVICE_KEY" > service.json
    gcloud auth activate-service-account --key-file=service.json
    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
    gcloud auth configure-docker

k8s_auth: &k8s_auth
  name: Copy k8s auth for kubectl
  command: |-
    gcloud container clusters get-credentials --zone ${GOOGLE_COMPUTE_ZONE} ${GOOGLE_CLUSTER_NAME}

jobs:
  linter:
    docker:
      - image: circleci/python:3.7.6
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Running linter
          command: |
            pip3 install -Iv black==19.10b0
            black --check .
  build:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        name: build container
        command: |-
          make -f Makefile.circle build-requirements GH_ACCESS_TOKEN=$GH_ACCESS_TOKEN
          make -f Makefile.circle build VERSION=$CIRCLE_TAG
          make -f Makefile.circle push
  test:
    environment:
      SONARSCANNER_VERSION: "4.3.0.2102"
    executor: codecov-worker
    steps:
      - run:
          name: verify postgres is up
          command: |
            while ! nc -vz postgres 5432; do sleep 1; echo "waiting for postgres"; done
      - run:
          name: run tests
          command: |
            make test.unit
            make test.integration

      - run:
          name: codecov
          command: |
            wget https://github.com/codecov/uploader/releases/download/v0.1.0_1681/codecov-alpine
            chmod +x ./codecov-alpine
            ./codecov-alpine -R . -F integration -f integration.coverage.xml -Z
            ./codecov-alpine -R . -F unit -f unit.coverage.xml -Z

      - run:
          name: Install OpenJDK 11 (for SonarScanner)
          command: |
            apk --no-cache add openjdk11 --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community

      - run:
          name: Install SonarScanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONARSCANNER_VERSION.zip
            unzip sonar-scanner-cli-$SONARSCANNER_VERSION.zip

      - run:
          name: Run SonarScanner
          command: |
            # add token
            echo "sonar.login="$SONAR_TOKEN >> ./sonar-project.properties

            # optional: add pull request info
            if [ -n "$CIRCLE_PULL_REQUEST" ] 
            then
              GITHUB_PR_NUM=$(echo $CIRCLE_PULL_REQUEST | tr -dc '0-9')
              echo "sonar.pullrequest.key="$GITHUB_PR_NUM >> ./sonar-project.properties
              echo "sonar.pullrequest.branch="$CIRCLE_BRANCH >> ./sonar-project.properties
              echo "sonar.pullrequest.base=master" >> ./sonar-project.properties
            fi

            ./sonar-scanner-$SONARSCANNER_VERSION/bin/sonar-scanner -X

      - run:
          name: Delete OpenJDK11 and SonarScanner
          command: |
            apk del openjdk11
            rm sonar-scanner-cli-$SONARSCANNER_VERSION.zip
            rm -rf sonar-scanner-$SONARSCANNER_VERSION

  staging:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        name: docker build, tag, and upload to staging
        command: |
          make -f Makefile.circle staging

  production:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        name: docker build, tag, and upload to production
        command: |
          make -f Makefile.circle production

  deploy:
    executor: codecov-deploy
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *gcloud_auth
    - run:
        <<: *k8s_auth
    - run:
        name: deploy to k8s
        command: |-
          make -f Makefile.circle tag
          make -f Makefile.circle deploy
  
  dockerhub:
    executor: codecov-deploy
    steps:
      - checkout
      - setup_remote_docker
      - run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run: make dockerhub.deploy GH_ACCESS_TOKEN=$GH_ACCESS_TOKEN

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - linter
      - build:
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - staging:
          requires:
            - build
            - test
          filters:
            branches:
              only: master
      - production:
          requires:
            - build
            - test
          filters:
            tags:
              only: "/^production-[0-9]{4}-[0-9]{2}-[0-9]{4}/"
            branches:
              only: production
      - deploy:
          requires:
            - build
            - test
          filters:
            branches:
              only: production
      - dockerhub:
          requires:
            - build
            - test
          filters:
            branches:
              only: master
